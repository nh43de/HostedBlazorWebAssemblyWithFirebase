@using TrailBlazor.Models
@using Microsoft.Extensions.DependencyInjection
@using HostedBlazorWithFirebase.Client.Services
@using HostedBlazorWithFirebase.Client.Models

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {

    /// <summary>
    /// Called when onAuthStateChanged called in Firebase.
    /// </summary>
    /// <param name="user"></param>
    /// <returns></returns>
    [JSInvokable]
    public static async Task UpdateFirebaseUserAndToken(FirebaseUser user, FirebaseIdTokenResult tokens)
    {
        var cache = Program.Services.GetService<FirebaseCache>();
        var firebaseJs = Program.Services.GetService<FirebaseJsProvider>();

        firebaseJs.SetInitialized();
        await cache.SetUser(user);
        await cache.SetTokens(tokens);

        var loginState = Program.Services.GetService<ClientSideStateProvider>();

        loginState.ManageUser();
    }
}